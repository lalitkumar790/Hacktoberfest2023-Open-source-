#include <iostream>

class ListNode {
public:
    int data;
    ListNode* next;
    ListNode(int val) : data(val), next(nullptr) {}
};

class Solution {
public:
    void rearrange(ListNode* head) {
        if (head == nullptr || head->next == nullptr || head->next->next == nullptr)
            return;

        ListNode* current = head;
        ListNode* extractedHead = nullptr;
        ListNode* extractedTail = nullptr;

        // Traverse the list and extract alternative nodes starting from the second node
        while (current != nullptr && current->next != nullptr) {
            ListNode* nextNode = current->next;
            current->next = nextNode->next;
            nextNode->next = nullptr;

            if (extractedHead == nullptr) {
                extractedHead = nextNode;
                extractedTail = nextNode;
            } else {
                extractedTail->next = nextNode;
                extractedTail = nextNode;
            }

            current = current->next;
        }

        // Reverse the extracted list
        ListNode* prev = nullptr;
        ListNode* currentExtracted = extractedHead;
        while (currentExtracted != nullptr) {
            ListNode* nextNode = currentExtracted->next;
            currentExtracted->next = prev;
            prev = currentExtracted;
            currentExtracted = nextNode;
        }

        // Append the extracted list at the end of the original list
        current = head;
        while (current->next != nullptr) {
            current = current->next;
        }

        current->next = prev;
    }
};

void printList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->data << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    // Example 1
    ListNode* head1 = new ListNode(10);
    head1->next = new ListNode(4);
    head1->next->next = new ListNode(9);
    head1->next->next->next = new ListNode(1);
    head1->next->next->next->next = new ListNode(3);
    head1->next->next->next->next->next = new ListNode(5);
    head1->next->next->next->next->next->next = new ListNode(9);
    head1->next->next->next->next->next->next->next = new ListNode(4);

    Solution sol1;
    sol1.rearrange(head1);
    std::cout << "Example 1: ";
    printList(head1);

    // Example 2
    ListNode* head2 = new ListNode(1);
    head2->next = new ListNode(2);
    head2->next->next = new ListNode(3);
    head2->next->next->next = new ListNode(4);
    head2->next->next->next->next = new ListNode(5);

    Solution sol2;
    sol2.rearrange(head2);
    std::cout << "Example 2: ";
    printList(head2);

    return 0;
}
